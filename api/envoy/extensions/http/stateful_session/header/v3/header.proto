syntax = "proto3";

package envoy.extensions.http.stateful_session.header.v3;

import "udpa/annotations/status.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.http.stateful_session.header.v3";
option java_outer_classname = "HeaderProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/extensions/http/stateful_session/header/v3;headerv3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: Header based stateful session extension]

// This extension allows the session state to be tracked via request headers.
//
// This extension encodes the address of the upstream host selected by the load balancer
// into a response header with the :ref:`header configuration
// <envoy_v3_api_msg_extensions.http.stateful_session.header.v3.HeaderBasedSessionState>`.
// When new requests are incoming, this extension will try to parse the specific upstream host
// address by header name. If the address parsed from the header corresponds to a valid
// upstream host, this upstream host will be selected first. See :ref:`stateful session filter
// <envoy_v3_api_msg_extensions.filters.http.stateful_session.v3.StatefulSession>`.
//
// For example, if the header name is set to ``session-header``, Envoy will prefer ``1.2.3.4:80``
// as the upstream host when the request contains the following header (Note that plain text is used
// here as example but actually header value will be base64 encoded):
//
// .. code-block:: none
//
//     session-header: "1.2.3.4:80"
//
// When processing the upstream response, if ``1.2.3.4:80`` is indeed the final choice the extension
// does nothing. If ``1.2.3.4:80`` is not the final choice, the new selected host will be set to
// response headers (via the ``session-header`` response header).
//
// [#extension: envoy.http.stateful_session.header]
message HeaderBasedSessionState {
  enum Mode {
    // If an upstream host is selected and the its address is different from the request header value
    // (or if the request header is not present), the extension will set the response header value to
    // selected upstream host address. This is the default mode.
    OVERRIDE = 0;

    // Iff the response header is present then the selected upstream host address will be encoded into
    // the response header with following format (Note that plain text is used here as example but
    // actually header value will be base64 encoded):
    //
    // .. code-block:: none
    //
    //   session-header: 1.2.3.4:80;origin:xxxxxxxxxxxxxxxx
    //
    // The ``origin`` part is the the original header value in the response. The ``origin`` part is
    // should always be last part of the header value.
    //
    // If this mode is used then we will assume that the header in the request will also be in the
    // same format and contains the ``origin`` part. This extension will parse the upstream host
    // address and rewrite the header in the request to the ``origin`` part.
    //
    // This mode is useful when the server have provide a session id or similar information in the
    // response header and the client is expected to send it back in the request.
    PACKAGES = 1;
  }

  // The name that will be used to obtain header value from downstream HTTP request and generate
  // new response header for downstream.
  string name = 1 [(validate.rules).string = {min_len: 1}];

  Mode mode = 2 [(validate.rules).enum = {defined_only: true}];
}
